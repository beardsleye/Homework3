[
  {
    "objectID": "Data_Management.html",
    "href": "Data_Management.html",
    "title": "Task 1",
    "section": "",
    "text": "Warning: package 'tidyverse' was built under R version 4.1.3\n\n\nWarning: package 'tibble' was built under R version 4.1.3\n\n\nWarning: package 'tidyr' was built under R version 4.1.3\n\n\nWarning: package 'readr' was built under R version 4.1.3\n\n\nWarning: package 'purrr' was built under R version 4.1.3\n\n\nWarning: package 'dplyr' was built under R version 4.1.3\n\n\nWarning: package 'forcats' was built under R version 4.1.3\n\n\nWarning: package 'lubridate' was built under R version 4.1.3\n\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.1\nv ggplot2   3.4.4     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nWarning: package 'readxl' was built under R version 4.1.3\n\n\n\nTask 1\n\n\nmyfolder/“MyData.csv”\nR projects is useful as it is allows for reproducibility, collaboration, and feedback.\nGit is an open source version control tool for code and GitHub is a cloud-based service that allows for Git repository management.\nThe difference between tibble and data frames is tibble preserves all variable types, but data frames have the option to covert strings to factors.\nas_tibble(iris) |&gt; select(start_with(“Petal”), Species) |&gt; filter(Petal.Length &lt; 1.55) |&gt; arrange(Species)\nLong format data is where each row consists of one observation and each column consists of one variable. Where wide format data is where more than one observation is in a given row. Statisticians prefer long form data for a nicer analysis.\n\n\n\n\nTask 2\nReading in glass data, changing type of glass variable (previously numeric) into descriptions, and selecting rows were Fe &lt; .2 and type of glass is tableware or headlamps.\n\nglass&lt;-read_delim(file = \"https://www4.stat.ncsu.edu/~online/datasets/glass.data\" , delim = \",\", col_names = c(\"ID\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\", \"Type_of_Glass\"))\n\nRows: 214 Columns: 11\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\ndbl (11): ID, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_Glass\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass\n\n# A tibble: 214 x 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# i 204 more rows\n\nglass |&gt;\n  mutate(Type_of_Glass = ifelse(Type_of_Glass %in% 1, \"building_windows_float_processed\",\n                                 ifelse(Type_of_Glass %in% 2, \"building_windows_non_float_processed\",\n                                        ifelse(Type_of_Glass %in% 3, \"vehicle_windows_float_processed\",\n                                               if_else(Type_of_Glass %in% 4, \" vehicle_windows_non_float_processed\",\n                                                      if_else(Type_of_Glass %in% 5, \"containers\",\n                                                             if_else(Type_of_Glass %in% 6, \"tableware\",\n                                                                    if_else(Type_of_Glass %in% 7, \"headlamps\", \"N/A\")))))))\n       ) |&gt;\n  filter((Fe &lt; .2) & (Type_of_Glass == \"tableware\" | Type_of_Glass == \"headlamps\"))\n\n# A tibble: 38 x 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware    \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware    \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware    \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware    \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware    \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware    \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware    \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware    \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware    \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps    \n# i 28 more rows\n\n\nReading in Yeast data, removing seq_names and nuc columns and creating mean and median columns that coordinate to the remaining numeric.\n\nyeast&lt;-read_table(file = \"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",\n                   col_names = c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuc\", \"class\"))\n\n\n-- Column specification --------------------------------------------------------\ncols(\n  seq_name = col_character(),\n  mcg = col_double(),\n  gvh = col_double(),\n  alm = col_double(),\n  mit = col_double(),\n  erl = col_double(),\n  pox = col_double(),\n  vac = col_double(),\n  nuc = col_double(),\n  class = col_character()\n)\n\nyeast\n\n# A tibble: 1,484 x 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# i 1,474 more rows\n\nyeast |&gt;\n  subset(select = -c(seq_name, nuc)) |&gt;\n  mutate(across(where(is.numeric), list(mean=mean, median=median), .names = \"{.col}_{.fn}\")) \n\n# A tibble: 1,484 x 22\n     mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_median gvh_mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.500       0.49    0.500\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.500       0.49    0.500\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.500       0.49    0.500\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.500       0.49    0.500\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.500       0.49    0.500\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.500       0.49    0.500\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.500       0.49    0.500\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.500       0.49    0.500\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.500       0.49    0.500\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.500       0.49    0.500\n# i 1,474 more rows\n# i 11 more variables: gvh_median &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_median &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;\n\n\n\n\nTask 3\nRead in White wine data, rename columns, and create variable denoting data comes from white wine.\n\nwhite_wine &lt;- read_excel(\"C:/Users/beard/Downloads/white-wine.xlsx\")\n\nwhite_wine_columns&lt;-read_excel(\"C:/Users/beard/Downloads/white-wine.xlsx\", sheet = 2)\n\ncolnames(white_wine)&lt;-white_wine_columns$Variables\n\nwhite_wine\n\n# A tibble: 4,898 x 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# i 4,888 more rows\n# i 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\nwhite_wine_type&lt;-add_column(white_wine, wine_type=\"white\")\n\nwhite_wine_type\n\n# A tibble: 4,898 x 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# i 4,888 more rows\n# i 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\nRead in red wine, rename columns, and create variable denoting data comes from red wine.\n\nred_wine &lt;- read_delim(\"C:/Users/beard/Downloads/red-wine.csv\", \n    delim = \";\", escape_double = FALSE, trim_ws = TRUE)\n\nRows: 1599 Columns: 12\n-- Column specification --------------------------------------------------------\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncolnames(red_wine)&lt;-white_wine_columns$Variables\n\nred_wine\n\n# A tibble: 1,599 x 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# i 1,589 more rows\n# i 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\nred_wine_type&lt;-add_column(red_wine, wine_type=\"red\")\n\nred_wine_type\n\n# A tibble: 1,599 x 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# i 1,589 more rows\n# i 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\nCombine white wine and red wine data. Then, only select rows with quality &gt; 6.5 and alcohol &lt; 132, sort by descending quality, selecting only citric acid, alcohol, wine, and quality columns, and create mean and standard deviation columns for alcohol grouped by quality.\n\nwines&lt;- dplyr::bind_rows(white_wine_type,red_wine_type)\n\nwines\n\n# A tibble: 6,497 x 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# i 6,487 more rows\n# i 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\nwines |&gt;\n  filter((quality &gt; 6.5) & (alcohol &lt; 132)) |&gt;\n  arrange(desc(quality)) |&gt;\n  subset(select = c(citric_acid, alcohol, wine_type, quality)) |&gt;\n  group_by(quality) |&gt;\n  mutate(across(alcohol, list(mean=mean, sd=sd), .names = \"{.col}_{.fn}\"))\n\n# A tibble: 1,206 x 6\n# Groups:   quality [3]\n   citric_acid alcohol wine_type quality alcohol_mean alcohol_sd\n         &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;\n 1        0.45     104 white           9        122.        10.1\n 2        0.29     124 white           9        122.        10.1\n 3        0.36     125 white           9        122.        10.1\n 4        0.34     127 white           9        122.        10.1\n 5        0.49     129 white           9        122.        10.1\n 6        0.48     128 white           8         94.1       42.8\n 7        0.48     128 white           8         94.1       42.8\n 8        0.42     105 white           8         94.1       42.8\n 9        0.31     107 white           8         94.1       42.8\n10        0.31     107 white           8         94.1       42.8\n# i 1,196 more rows\n\n\n\n\nTask 4\nconnecting to data base.\n\ncon &lt;- dbConnect(SQLite(), \"lahman (1).db\")\ndbListTables(con)\n\n [1] \"AllstarFull\"         \"Appearances\"         \"AwardsManagers\"     \n [4] \"AwardsPlayers\"       \"AwardsShareManagers\" \"AwardsSharePlayers\" \n [7] \"Batting\"             \"BattingPost\"         \"CollegePlaying\"     \n[10] \"Fielding\"            \"FieldingOF\"          \"FieldingOFsplit\"    \n[13] \"FieldingPost\"        \"HallOfFame\"          \"HomeGames\"          \n[16] \"LahmanData\"          \"Managers\"            \"ManagersHalf\"       \n[19] \"Parks\"               \"People\"              \"Pitching\"           \n[22] \"PitchingPost\"        \"Salaries\"            \"Schools\"            \n[25] \"SeriesPost\"          \"Teams\"               \"TeamsFranchises\"    \n[28] \"TeamsHalf\"           \"battingLabels\"       \"fieldingLabels\"     \n[31] \"pitchingLabels\"     \n\n\nRetrieving the Teams data set for year 2015 in 2 different ways.\n\ntbl(con, \"Teams\") |&gt;\n  filter(yearID == 2015)\n\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.46.0 [C:\\Users\\beard\\OneDrive\\Documents\\Homework3\\lahman (1).db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# i more rows\n# i 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\ntbl(con, sql(\" SELECT *\n             FROM `Teams`\n             WHERE (`yearID` = 2015.0)\"))\n\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.46.0 [C:\\Users\\beard\\OneDrive\\Documents\\Homework3\\lahman (1).db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# i more rows\n# i 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\nRetrieving data from those inducted in the hall of fame and selecting player, year, and category columns. Then, joining this data set with the People data set to get first and last names for inductees.\n\ntbl(con, \"HallOfFame\") |&gt;\n  filter(inducted == \"Y\") |&gt;\n  select(playerID, yearID, category)\n\n# Source:   SQL [?? x 3]\n# Database: sqlite 3.46.0 [C:\\Users\\beard\\OneDrive\\Documents\\Homework3\\lahman (1).db]\n   playerID  yearID category         \n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;            \n 1 cobbty01    1936 Player           \n 2 ruthba01    1936 Player           \n 3 wagneho01   1936 Player           \n 4 mathech01   1936 Player           \n 5 johnswa01   1936 Player           \n 6 lajoina01   1937 Player           \n 7 speaktr01   1937 Player           \n 8 youngcy01   1937 Player           \n 9 bulkemo99   1937 Pioneer/Executive\n10 johnsba99   1937 Pioneer/Executive\n# i more rows\n\nright_join(tbl(con, \"People\") |&gt;\n  select(playerID, nameFirst, nameLast),\n  tbl(con, \"HallOfFame\") |&gt;\n  filter(inducted == \"Y\") |&gt;\n  select(playerID, yearID, category),\n  by = join_by(playerID))\n\n# Source:   SQL [?? x 5]\n# Database: sqlite 3.46.0 [C:\\Users\\beard\\OneDrive\\Documents\\Homework3\\lahman (1).db]\n   playerID  nameFirst nameLast  yearID category\n   &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;   \n 1 aaronha01 Hank      Aaron       1982 Player  \n 2 alexape01 Pete      Alexander   1938 Player  \n 3 alomaro01 Roberto   Alomar      2011 Player  \n 4 alstowa01 Walter    Alston      1983 Manager \n 5 andersp01 Sparky    Anderson    2000 Manager \n 6 ansonca01 Cap       Anson       1939 Player  \n 7 aparilu01 Luis      Aparicio    1984 Player  \n 8 applilu01 Luke      Appling     1964 Player  \n 9 ashburi01 Richie    Ashburn     1995 Player  \n10 averiea01 Earl      Averill     1975 Player  \n# i more rows\n\n\nRetrieving data for managers, their playerID, Games, Wins, and Losses. Then, grouping by player ID creating columns to sum their games, wins, and losses and create column of win/loss percentage and sorting by highest to lowest of said percentage.\n\ntbl(con, \"Managers\") |&gt;\n  select(playerID, G, W, L) |&gt;\n  group_by(playerID) |&gt;\n  summarize(G_managed = sum(G, na.rm = TRUE),\n  Total_W = sum(W, na.rm = TRUE),\n  Total_L = sum(L, na.rm = TRUE)) |&gt;\n  collect() |&gt;\n  mutate(W_L_percentage = (Total_W / G_managed)*100) |&gt;\n  arrange(desc(W_L_percentage))\n\n# A tibble: 749 x 5\n   playerID  G_managed Total_W Total_L W_L_percentage\n   &lt;chr&gt;         &lt;int&gt;   &lt;int&gt;   &lt;int&gt;          &lt;dbl&gt;\n 1 bensove01         1       1       0            100\n 2 burwebi01         1       1       0            100\n 3 cohenan01         1       1       0            100\n 4 ebeldi99          3       3       0            100\n 5 falkbi01          1       1       0            100\n 6 hardeme01         3       3       0            100\n 7 simmote01         1       1       0            100\n 8 steinte01         2       2       0            100\n 9 sukefcl01         2       2       0            100\n10 tamarjo01         1       1       0            100\n# i 739 more rows\n\n\nCompletely joining the first join (hall of fame people) and managers with calculated statistics.\n\ninner_join((right_join(tbl(con, \"People\") |&gt;\n  select(playerID, nameFirst, nameLast),\n  tbl(con, \"HallOfFame\") |&gt;\n  filter(inducted == \"Y\") |&gt;\n  select(playerID, yearID, category),\n  by = join_by(playerID))),\n  tbl(con, \"Managers\") |&gt;\n  select(playerID, G, W, L) |&gt;\n  group_by(playerID) |&gt;\n  summarize(G_managed = sum(G, na.rm = TRUE),\n  Total_W = sum(W, na.rm = TRUE),\n  Total_L = sum(L, na.rm = TRUE)) |&gt;\n  collect() |&gt;\n  mutate(W_L_percentage = (Total_W / G_managed)*100) |&gt;\n  arrange(desc(W_L_percentage)),\n  by = join_by(playerID),\n  copy= TRUE)\n\n# Source:   SQL [?? x 9]\n# Database: sqlite 3.46.0 [C:\\Users\\beard\\OneDrive\\Documents\\Homework3\\lahman (1).db]\n   playerID  nameFirst nameLast  yearID category       G_managed Total_W Total_L\n   &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;              &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n 1 alstowa01 Walter    Alston      1983 Manager             3658    2040    1613\n 2 andersp01 Sparky    Anderson    2000 Manager             4030    2194    1834\n 3 ansonca01 Cap       Anson       1939 Player              2288    1296     947\n 4 applilu01 Luke      Appling     1964 Player                40      10      30\n 5 baineha01 Harold    Baines      2019 Player                 4       1       3\n 6 bancrda01 Dave      Bancroft    1971 Player               615     249     363\n 7 barroed99 Ed        Barrow      1953 Pioneer/Execu~       639     310     320\n 8 berrayo01 Yogi      Berra       1972 Player               930     484     444\n 9 bottoji01 Jim       Bottomley   1974 Player                78      21      56\n10 boudrlo01 Lou       Boudreau    1970 Player              2404    1162    1224\n# i more rows\n# i 1 more variable: W_L_percentage &lt;dbl&gt;"
  }
]